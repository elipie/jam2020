__intern_object_patch__(Object, {
  func patch(self, _patch) {
    return __intern_object_patch__(self, _patch);
  }
});

Object.patch({
  func __lt__(self, other) {
    return self.__compare__(other) == -1;
  }

  func __gt__(self, other) {
    return self.__compare__(other) == 1;
  }

  func __lte__(self, other) {
    return self.__compare__(other) != 1;
  }

  func __gte__(self, other) {
    return self.__compare__(other) != -1;
  }
});


Func.patch({
  instance = {
    _method: Func = (self) {}
  }

  func __construct__(self, method) {
    self._method = method;
  }
});



let Num = Type.extend({
  name = 'Num'
  
  func __construct__(self, value) {
      self._value = value;
  }

  func to_int(self) {
    return __intern_to_int__(self._value);
  }

  func to_str(self) {
    return __intern_num_to_str__(self._value);
  }
});

let Float = Num.extend({
  name = 'Float'

  instance = {
    _value = 0.0
  }
});

let Int = Num.extend({
  name = 'Int'

  instance = {
    _value = 0
  }
  
  func __add__(self, value) {
      return __intern_int_add__(self._value, value);
  }
  func __sub__(self, value) {     
      return __intern_int_sub__(self._value, value);
  }
  
  func __mul__(self, value) {
      return __intern_int_mul__(self._value, value);
  }
  func __div__(self, value) {     
      return __intern_int_div__(self._value, value);
  }
});

let Array = Type.extend({
  name = 'Array'

  instance = {
    _value = []
  }

  func __construct__(self, value) {
    self._value = value;
  }

  func len(self) {
    let _rval = __intern_array_len__(self._value);
    return _rval;
  }

  func __at__(self, index) {
    let value = __intern_array_at__(self._value, index);
    return value;
  }
});

let Bool = Num.extend({
    name = 'Bool'
    
    true
    false
    
    instance = {
        _value = 0
    }
    
    func __construct__(self, value) {
        self._value = !!value;
    }
    
    func to_str(self) {
        let rval = "false";
        if self._value {
            rval = "true";
        }
        return rval;
    }
});

Bool.true = Bool.new(1);
Bool.false = Bool.new(0);
Bool.instance._value = Bool.false;

let Str = Array.extend({
  name = 'Str'

  instance = {
    _value = ''
  }

  func __construct__(self, value) {
    self._value = value;
  }
  
  func append(self, value) {
    return __intern_str_append__(self._value, value);
  }
  
  func __add__(self, value) {
      return self.append(value);
  }

  func __mul__(self, value) {
      let str = "";
      while value {
        str = __intern_str_append__(self._value, str);
        value -= 1;
      }
      return str;
  }

  func to_str(self) {
    return self._value;
  }
});

let int = Int;
let str = Str;
let num = Num;
let float = Float;
let type = Type;

let true: Bool = Bool.true;
let false: Bool = Bool.false;

