let Array = Type.extend({
  name = 'Array'

  instance = {
    _value = []

    func __at__(self, index) {
      let value = __intern_array_at__(self._value, index);
      return value;
    }

    func __add__(self, value) {
      return self.append(value);
    }

    func __bitor__(self, value) {
      # TODO union
    }

    func __bitand__(self, value) {
      # TODO intersection
    }

    func __iterate__(self, cb) {
      let remaining = self.len();
      let len = self.len();

      while remaining != 0 {
        let index = len - remaining;

        cb(self[index]);

        remaining -= 1;
      }
    }

    func to_str(self) {
      let str_result = '[';

      for index in Range.new(0, self.len()) {
        let item = self[index];

        str_result += item.to_str();

        if index != (self.len() - 1) { # precendence is whack
          str_result += ', ';
        }
      }

      str_result += ']';

      return str_result;
    }
  }

  func __construct__(self, value) {
    self._value = value;
  }

  func contains(self, value) {
    let index = self.len();
    let has_value = false;

    while index != 0 {
      index -= 1;
      let a_val = self[index];

      if a_val == value {
        has_value = true;
      }

      # TODO add break
      if has_value {
        index = 0;
      }
    }

    return has_value;
  }

  func len(self) {
    let _rval = __intern_array_len__(self._value);
    return _rval;
  }
  
  func append(self, value) {
    return __intern_array_append__(self._value, value);
  }

});
