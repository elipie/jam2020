let Array = Type.extend({
  name = 'Array'

  instance = {
    _value = []
  }

  func __construct__(self, value) {
    self._value = value;
  }

  func contains(self, value) {
    let index = self.len();
    let has_value = false;

    while index != 0 {
      index -= 1;
      print(index);
      let a_val = self.__at__(index);

      print("a_val = ");
      print(a_val);
      print(value);

      if a_val == value {
        print("eql");
        has_value = true;
      }

      # TODO add break
      if has_value == true {
        print("has_value is true");
        print(has_value);
        index = 0;
      }
    }

    return has_value;
  }

  func len(self) {
    let _rval = __intern_array_len__(self._value);
    return _rval;
  }

  func __at__(self, index) {
    let value = __intern_array_at__(self._value, index);
    return value;
  }
  
  func append(self, value) {
    return __intern_array_append__(self._value, value);
  }
  
  func __add__(self, value) {
    return self.append(value);
  }

  func __bitor__(self, value) {
    # TODO union
  }

  func __bitand__(self, value) {
    # TODO intersection
  }

});
